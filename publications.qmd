```{r}
#| message: false
#| warning: false
#| echo: false

library(yaml)
library(htmltools)

# ---- Lire le YAML ----
pubs <- yaml::read_yaml("file/publications.yml")

# ---- Sécurité : s’assurer que c’est une liste ----
if (!is.list(pubs)) stop("Le fichier YAML doit être une liste de publications (avec des - au début).")

# ---- Extraire tous les topcat ----
get_topcats <- function(x) {
  t <- x$topcat
  if (is.null(t)) return(character())
  if (is.list(t)) return(unlist(t))
  return(as.character(t))
}
all_topcats <- sort(unique(unlist(lapply(pubs, get_topcats))))
if (length(all_topcats) == 0) all_topcats <- c("Sans catégorie")

# ---- Générer le menu ----
menu_html <- paste0(
  '<div class="listing-actions">',
  '<label for="selTopcat" style="margin-right:8px;">Filtrer par catégorie :</label>',
  '<select id="selTopcat"><option value="">— Toutes —</option>',
  paste(sprintf('<option value="%s">%s</option>', all_topcats, all_topcats), collapse = ""),
  '</select>',
  '<button id="resetFilters" class="btn btn-outline-secondary btn-sm" style="margin-left:8px;">Réinitialiser</button>',
  '</div>'
)

# ---- Fonction pour générer une carte ----
esc <- htmlEscape
ref_html <- function(p) {
  title <- esc(p$title %||% "")
  authors <- esc(p$authors %||% "")
  venue <- esc(p$venue %||% "")
  year <- esc(as.character(p$year %||% ""))
  type <- esc(p$type %||% "")
  url <- p$url %||% ""
  topcat <- get_topcats(p)
  cats_attr <- paste(topcat, collapse = "||")

  link_html <- if (!is.na(url) && nzchar(url)) {
    sprintf('<div class="pub-link"><a href="%s" target="_blank" rel="noopener">Lien vers la publication</a></div>', esc(url))
  } else ""

  sprintf('
  <div class="pub-card" data-topcat="%s">
    <div class="pub-title">%s</div>
    <div class="pub-authors">%s</div>
    <div class="pub-venue"><em>%s</em>%s — <span class="pub-type">%s</span></div>
    %s
  </div>',
  esc(cats_attr), title, authors, venue,
  if (nzchar(year)) paste0(", ", year) else "",
  type, link_html)
}

`%||%` <- function(a,b) if (is.null(a)) b else a

# ---- Rendre toutes les cartes ----
cards <- vapply(pubs, ref_html, character(1))

htmltools::HTML(menu_html, sprintf('<div id="pub-list">%s</div>', paste(cards, collapse="\n")))
```

```{=html}
<style>
.pub-card { padding: 12px 14px; border: 1px solid #eaeaea; border-radius: 10px; background: #fff; margin-bottom: 12px; }
.pub-title { font-size: 1.0rem; font-weight: 600; line-height: 1.3; margin-bottom: 4px; }
.pub-authors { color: #4a4a4a; margin-bottom: 2px; }
.pub-venue { color: #2f3b4a; margin-bottom: 6px; }
.pub-type { font-style: italic; color: #5a6a7a; }
.pub-link a { text-decoration: none; }
.listing-actions { margin: 10px 0 14px; }
</style>
```

```{=html}
<script>
window.addEventListener('DOMContentLoaded', function() {
  const select = document.getElementById('selTopcat');
  const reset  = document.getElementById('resetFilters');
  function getCats(card) {
    const raw = card.getAttribute('data-topcat') || '';
    return raw.split('||').map(s => s.trim()).filter(Boolean);
  }
  function applyFilter() {
    const wanted = (select?.value || '').trim();
    document.querySelectorAll('#pub-list .pub-card').forEach(card => {
      const show = !wanted || getCats(card).includes(wanted);
      card.style.display = show ? '' : 'none';
    });
  }
  if (select) select.addEventListener('change', applyFilter);
  if (reset)  reset.addEventListener('click', () => { select.value=''; applyFilter(); });
});
</script>
```
